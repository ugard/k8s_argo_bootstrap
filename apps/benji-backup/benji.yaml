apiVersion: v1
kind: ServiceAccount
metadata:
  name: benji
  namespace: backup-system
  labels:
    app.kubernetes.io/name: benji
    app.kubernetes.io/instance: benji
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: benji
  labels:
    app.kubernetes.io/name: benji
    app.kubernetes.io/instance: benji
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  - persistentvolumeclaims
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ""
  resources:
    - persistentvolumeclaims
  verbs:
    - create
- apiGroups:
    - ""
  resources:
    - events
  verbs:
    - create
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  # Also needs GET where kubectl doesn't, see https://github.com/kubernetes-client/python/issues/690#issuecomment-459010364
  - get
---
# Source: benji/templates/cluster-role-binding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: benji
  labels:
    app.kubernetes.io/name: benji
    app.kubernetes.io/instance: benji
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: benji
subjects:
  - kind: ServiceAccount
    name: benji
    namespace: backup-system
---
# Source: benji/templates/fsfreeze-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: benji-fsfreeze
  namespace: backup-system
  labels:
      app.kubernetes.io/name: benji
      app.kubernetes.io/instance: benji
      app.kubernetes.io/component: fsfreeze
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: benji
      app.kubernetes.io/instance: benji
      app.kubernetes.io/component: fsfreeze
  template:
    metadata:
      labels:
        app.kubernetes.io/name: benji
        app.kubernetes.io/instance: benji
        app.kubernetes.io/component: fsfreeze
        # This is used to find fsfreeze pods
        benji-backup.me/component: "fsfreeze"
    spec:
      serviceAccountName: benji
      containers:
        - name: fsfreeze
          image: "docker.io/almalinux:8.7"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command:
            - sleep
            - 365d
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - mountPath: /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/
              name: rbd-mounts-1
            - mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi/pv
              name: rbd-mounts-2
      hostNetwork: false
      volumes:
        # - name: tz-config
        #   hostPath:
        #     path: /usr/share/zoneinfo/Europe/Berlin
        - hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/rbd/mounts/
            type: DirectoryOrCreate
          name: rbd-mounts-1
        - hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi/
            type: DirectoryOrCreate
          name: rbd-mounts-2
---
# Source: benji/templates/maint-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: benji-maint
  namespace: backup-system
  labels:
    app.kubernetes.io/name: benji
    app.kubernetes.io/instance: benji
    app.kubernetes.io/component: maint
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: benji
      app.kubernetes.io/instance: benji
      app.kubernetes.io/component: maint
  template:
    metadata:
      annotations:
        configmap.reloader.stakater.com/reload: "ceph-config"
        secret.reloader.stakater.com/reload: "rook-ceph-mon"
      labels:
        app.kubernetes.io/name: benji
        app.kubernetes.io/instance: benji
        app.kubernetes.io/component: maint
    spec:
      serviceAccountName: benji
      containers:
        - name: benji
          image: "ghcr.io/elemental-lf/benji-k8s:latest"
          securityContext:
            privileged: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROM_PUSH_GATEWAY
              value: "benji-pushgateway:9091"
            - name: TZ
              value: "Europe/Warsaw"
          volumeMounts:
            - name: benji-config
              mountPath: /benji/etc
            - name: ceph-data
              mountPath: /etc/ceph
      initContainers:
      - name: generate-ceph-files
        image: rook/ceph:v1.13.3
        command: ["/usr/bin/bash"]
        args: ["-c", "bash /script/generate-ceph.sh"]
        volumeMounts:
          - name: mon-endpoint-volume
            mountPath: /etc/rook
          - name: ceph-data
            mountPath: /etc/ceph
          - name: ceph-config
            mountPath: /script/generate-ceph.sh
            subPath: generate-ceph.sh
        env:
          - name: ROOK_CEPH_USERNAME
            valueFrom:
              secretKeyRef:
                name: rook-ceph-mon
                key: ceph-username
          - name: ROOK_CEPH_SECRET
            valueFrom:
              secretKeyRef:
                name: rook-ceph-mon
                key: ceph-secret
      volumes:
        - name: benji-config
          secret:
            secretName: benji
        - name: mon-endpoint-volume
          secret:
            secretName: rook-ceph-mon-endpoints
            items:
              - key: data
                path: mon-endpoints
        - name: ceph-data
          emptyDir: {}
        - name: ceph-config
          secret:
            secretName: generate-ceph