apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: appflowy
spec:
  selector:
    app: postgres
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: pgsql
      protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: appflowy
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: pgvector/pgvector:pg16
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: config-volume
              mountPath: /docker-entrypoint-initdb.d
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: appflowy
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: appflowy
                  key: POSTGRES_PASSWORD
            - name: SUPABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: appflowy
                  key: SUPABASE_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: pgsql
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: appflowy-postgres-data
        - name: config-volume
          configMap:
            name: pg-setup-configmap
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: appflowy-postgres-data
  namespace: appflowy
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-ceph-block
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-setup-configmap
data:
  setup.sh: |
    #!/usr/bin/bash
    set -e

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        -- Create the anon and authenticated roles if they don't exist
        CREATE OR REPLACE FUNCTION create_roles(roles text []) RETURNS void LANGUAGE plpgsql AS \$\$
        DECLARE role_name text;
        BEGIN FOREACH role_name IN ARRAY roles LOOP IF NOT EXISTS (
            SELECT 1
            FROM pg_roles
            WHERE rolname = role_name
        ) THEN EXECUTE 'CREATE ROLE ' || role_name;
        END IF;
        END LOOP;
        END;
        \$\$;

        -- Create supabase_auth_admin user if it does not exist
        DO \$\$ BEGIN IF NOT EXISTS (
            SELECT
            FROM pg_catalog.pg_roles
            WHERE rolname = 'supabase_auth_admin'
        ) THEN CREATE USER "supabase_auth_admin" BYPASSRLS NOINHERIT CREATEROLE LOGIN NOREPLICATION PASSWORD '$SUPABASE_PASSWORD';
        END IF;
        END \$\$;

        -- Create auth schema if it does not exist
        CREATE SCHEMA IF NOT EXISTS auth AUTHORIZATION supabase_auth_admin;

        -- Grant permissions
        GRANT CREATE ON DATABASE $POSTGRES_DB TO supabase_auth_admin;

        -- Set search_path for supabase_auth_admin
        ALTER USER supabase_auth_admin SET search_path = 'auth';
    EOSQL
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: appflowy
spec:
  selector:
    matchLabels:
      app: redis
      namespace: appflowy
  template:
    metadata:
      labels:
        app: redis
        namespace: appflowy
    spec:
      containers:
      - name: redis
        image: docker.io/library/redis:7
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: appflowy
spec:
  selector:
    app: redis
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: pgsql
      protocol: TCP
---